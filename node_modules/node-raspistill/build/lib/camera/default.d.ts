/// <reference types="node" />
import { ICamera, ICameraOptions, IInnerExecCameraOptions } from './interfaces';
import { IWatcher } from '../..';
import { IRaspistillExecutor } from '../..';
export declare class DefaultCamera implements ICamera {
    protected _watcher: IWatcher;
    protected _executor: IRaspistillExecutor;
    protected _options: ICameraOptions;
    protected readonly _optionsMap: Record<string, string>;
    private readonly _defaultOptions;
    private _optionsParser;
    constructor(options?: ICameraOptions, _watcher?: IWatcher, _executor?: IRaspistillExecutor);
    setOptions(options: ICameraOptions): void;
    getOptions(): ICameraOptions;
    getOption(key: string): any;
    timelapse(fileName: string, intervalMs: number, execTimeMs: number, cb: (image: Buffer) => any): Promise<void>;
    timelapse(intervalMs: number, execTimeMs: number, cb: (image: Buffer) => any): Promise<void>;
    takePhoto(fileName?: string): Promise<Buffer>;
    stop(): void;
    protected _processOptions(newOptions?: IInnerExecCameraOptions): string[];
}
